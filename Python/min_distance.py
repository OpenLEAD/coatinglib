from sympy import *
from numpy import *
from moving_LS import *
from scipy.optimize import newton_krylov

def fn4OLD(x,y,z,v):
    a=vector4(x,y,z)
    value = 0
    for i in range(0,len(v)):value+=v[i]*a[i]
    return value

def fn4(P):
    x=P[0];y=P[1];z=P[2]
    point=array([x,y,z])
    idx = Tree.query_ball_point(point,r)
    if len(idx)<=1:
        print("errou")
        return [-1,-1,-1]
    v, _, _, _, _ = polynomial_surface(point,rR,idx)
    return [dot(v,vector4(x,y,z)),0,0]

def f4(x,y,z):
    return 0.0158409735155322*x**4 - 0.0455175545677363*x**3*y + 0.229708256297771*x**3*z - 0.0123881037382856*x**3 - 0.0404958971530159*x**2*y**2 + 0.0370550760761227*x**2*y*z - 0.577768075781302*x**2*y - 0.155580530030559*x**2*z**2 + 0.0362405492287055*x**2*z - 0.131409797907689*x**2 + 0.0202057385466043*x*y**3 + 0.0426930375374075*x*y**2*z + 0.0696863140265359*x*y**2 - 0.0505449727608702*x*y*z**2 + 0.225686420684704*x*y*z - 0.0384970823430439*x*y + 0.105768716128252*x*z**3 - 0.118067494638723*x*z**2 - 1.21492908245443*x*z - 0.18276378366575*x + 0.0166396304986572*y**4 + 0.00338711654878079*y**3*z + 0.216501859969158*y**3 + 0.0811414830256883*y**2*z**2 + 0.02769438794406*y**2*z + 0.942772232605902*y**2 - 0.0290415751360407*y*z**3 + 0.627763785746382*y*z**2 + 0.0884479216928731*y*z + 1.61784537809966*y + 0.0109771138288731*z**4 - 0.178048926480733*z**3 + 1.50165747078441*z**2 + 0.196218414740315*z + 0.76794299165963

def f5(x,y,z):
    return 0.0297659116455479*x**5 + 0.181062045560249*x**4*y - 0.128661031864172*x**4*z + 0.307369024428665*x**4 + 0.0187730062188317*x**3*y**2 - 0.352382984812728*x**3*y*z - 0.0165274665944978*x**3*y + 0.109314604473024*x**3*z**2 - 0.285345405421894*x**3*z - 0.0953176916491287*x**3 + 0.0408304246877191*x**2*y**3 + 0.00447133758293315*x**2*y**2*z + 0.195842840630828*x**2*y**2 + 0.27146542716375*x**2*y*z**2 + 0.233595210793662*x**2*y*z - 0.260349111071952*x**2*y - 0.0589021386012211*x**2*z**3 + 0.187272006426444*x**2*z**2 + 0.662311023454343*x**2*z - 0.100094166057317*x**2 - 0.0432138132832048*x*y**4 + 0.0400826659272909*x*y**3*z - 0.42553574962281*x*y**3 - 0.102140941691896*x*y**2*z**2 + 0.409711840025748*x*y**2*z - 1.565282909628*x*y**2 - 0.0334481817041418*x*y*z**3 - 0.733013704495247*x*y*z**2 + 1.27796791340411*x*y*z - 2.51747409763771*x*y - 0.020191776904239*x*z**4 + 0.203163668332096*x*z**3 - 1.18680358227468*x*z**2 - 0.369578257596795*x*z - 1.47497490230636*x - 0.00520797176161978*y**5 + 0.040846567888235*y**4*z - 0.0651785345972887*y**4 - 0.00582434668496111*y**3*z**2 + 0.429749743471307*y**3*z - 0.294262656848997*y**3 + 0.0302244925660516*y**2*z**3 + 0.00973115339906459*y**2*z**2 + 1.6524767421243*y**2*z - 0.600269372065211*y**2 - 0.0149898305108897*y*z**4 + 0.183269458830206*y*z**3 + 0.374946543237288*y*z**2 + 2.72744600165394*y*z - 0.577089308079262*y + 0.00729646367142089*z**5 - 0.065684684064366*z**4 + 0.185426421490161*z**3 + 1.25471056201527*z**2 + 1.66800538058776*z - 0.370560555814104

def f4behind_filtered(x,y,z):
    return 0.23256524000168*x**4 - 0.0803593464907042*x**3*y - 0.383734254134677*x**3*z + 0.00436393131989541*x**3 + 0.0507931779830319*x**2*y**2 + 0.0634094586409759*x**2*y*z - 0.230454925983146*x**2*y + 0.492399768743622*x**2*z**2 - 0.0841779752966015*x**2*z - 0.0719708729835943*x**2 - 0.0173621871966343*x*y**3 - 0.0075263728926647*x*y**2*z - 0.0648891554000706*x*y**2 - 0.0824741231493418*x*y*z**2 + 0.101379769705647*x*y*z - 0.0305238793240705*x*y - 0.201578287070596*x*z**3 - 0.0138180109505892*x*z**2 - 0.909489575895646*x*z - 0.159044612063701*x + 0.0232495546616985*y**4 - 0.00512568852492615*y**3*z + 0.255063023472764*y**3 + 0.0832234479565902*y**2*z**2 - 0.0839605876912045*y**2*z + 1.01291311017395*y**2 - 0.0275741095916358*y*z**3 + 0.590020095137534*y*z**2 - 0.250204195750542*y*z + 1.67203834312611*y + 0.0716075331987429*z**4 - 0.237276989300336*z**3 + 1.30487684236424*z**2 + 0.0472995776370099*z + 0.750897097381243

def f4all_3mm(x,y,z):
    return 0.0388079293*x**4 - 0.0433149498*x**3*y + 0.151381408*x**3*z + 0.00138044769*x**3 - 0.0381872876*x**2*y**2 + 0.0369218793*x**2*y*z - 0.601464874*x**2*y - 0.115640905*x**2*z**2 + 0.0548742656*x**2*z - 0.185217968*x**2 - 0.0116512312*x*y**3 + 0.0467678861*x*y**2*z - 0.130855344*x*y**2 - 0.0687355941*x*y*z**2 + 0.266671401*x*y*z - 0.429640954*x*y + 0.0706505573*x*z**3 - 0.144688518*x*z**2 - 1.11486732*x*z - 0.442642101*x + 0.0176268132*y**4 + 0.0210435937*y**3*z + 0.202815593*y**3 + 0.0675498267*y**2*z**2 + 0.160021716*y**2*z + 0.821810883*y**2 - 0.0288737812*y*z**3 + 0.548893964*y*z**2 + 0.418625568*y*z + 1.35783742*y + 0.000911754926*z**4 - 0.162499201*z**3 + 1.43084162*z**2 + 0.438723449*z + 0.601287452

def f4coated4_50mm(x,y,z):
    return 0.210366913650167*x**4 + 0.607743786899794*x**3*y - 0.707234609953402*x**3*z + 0.573075139580213*x**3 + 0.203164874363018*x**2*y**2 - 0.421908589577347*x**2*y*z + 1.31121211241278*x**2*y + 1.24086914637841*x**2*z**2 + 0.065885415118794*x**2*z + 1.09974168847929*x**2 - 0.014150506173351*x*y**3 - 0.125701424698597*x*y**2*z + 0.037300424487786*x*y**2 - 0.0419025582651391*x*y*z**2 - 0.724750622468922*x*y*z + 0.630146164462021*x*y - 0.690968507486295*x*z**3 - 0.12442556368759*x*z**2 - 0.496555882470579*x*z + 0.0809323387905233*x + 0.0113323258784397*y**4 - 0.0247689443465589*y**3*z + 0.118782418819956*y**3 + 0.0687662568798315*y**2*z**2 - 0.247141943680235*y**2*z + 0.461628174707939*y**2 - 0.0442022398229372*y*z**3 + 0.415072461077496*y*z**2 - 0.633447995669211*y*z + 0.752767098639409*y + 0.186666432940899*z**4 - 0.296366521474835*z**3 + 0.565807556196118*z**2 + 0.168658949987404*z + 0.109139797748772

def minPoint(P):
##    x=Symbol('x')
##    y=Symbol('y')
##    z=Symbol('z')
    # Atras da Pa
    v= array([ 0.48142865,  0.36919764,  1.50562549,  0.00882344,  0.01972781,
        1.3841799 ,  0.28006017,  0.98778636, -0.02338231,  0.96834179,
        0.24100917,  0.15813788,  0.29048836,  0.04838359,  0.03168633,
       -0.39182614, -2.00343824, -0.99320701,  0.10410255, -0.59241825,
       -1.58884299,  0.03434364, -0.51603795, -0.28188791, -0.09554816,
        1.1591741 ,  1.08708153, -0.4800173 ,  1.32665283, -0.46163832,
        0.27164667, -0.3625252 ,  0.80764589,  0.40643701, -0.3522112 ])
    #Pa inteira
    v = array([ 0.76794299,  0.19621841,  1.50165747, -0.17804893,  0.01097711,
        1.61784538,  0.08844792,  0.62776379, -0.02904158,  0.94277223,
        0.02769439,  0.08114148,  0.21650186,  0.00338712,  0.01663963,
       -0.18276378, -1.21492908, -0.11806749,  0.10576872, -0.03849708,
        0.22568642, -0.05054497,  0.06968631,  0.04269304,  0.02020574,
       -0.1314098 ,  0.03624055, -0.15558053, -0.57776808,  0.03705508,
       -0.0404959 , -0.0123881 ,  0.22970826, -0.04551755,  0.01584097])
    #Pa inteira 5 grau
    v = array([-0.37056056,  1.66800538,  1.25471056,  0.18542642, -0.06568468,
        0.00729646, -0.57708931,  2.727446  ,  0.37494654,  0.18326946,
       -0.01498983, -0.60026937,  1.65247674,  0.00973115,  0.03022449,
       -0.29426266,  0.42974974, -0.00582435, -0.06517853,  0.04084657,
       -0.00520797, -1.4749749 , -0.36957826, -1.18680358,  0.20316367,
       -0.02019178, -2.5174741 ,  1.27796791, -0.7330137 , -0.03344818,
       -1.56528291,  0.40971184, -0.10214094, -0.42553575,  0.04008267,
       -0.04321381, -0.10009417,  0.66231102,  0.18727201, -0.05890214,
       -0.26034911,  0.23359521,  0.27146543,  0.19584284,  0.00447134,
        0.04083042, -0.09531769, -0.28534541,  0.1093146 , -0.01652747,
       -0.35238298,  0.01877301,  0.30736902, -0.12866103,  0.18106205,
        0.02976591])

    # Pa atras filtrada 50mm
    v = array([ 0.7508971 ,  0.04729958,  1.30487684, -0.23727699,  0.07160753,
        1.67203834, -0.2502042 ,  0.5900201 , -0.02757411,  1.01291311,
       -0.08396059,  0.08322345,  0.25506302, -0.00512569,  0.02324955,
       -0.15904461, -0.90948958, -0.01381801, -0.20157829, -0.03052388,
        0.10137977, -0.08247412, -0.06488916, -0.00752637, -0.01736219,
       -0.07197087, -0.08417798,  0.49239977, -0.23045493,  0.06340946,
        0.05079318,  0.00436393, -0.38373425, -0.08035935,  0.23256524])
    # Pa atras filtrada 3mm
    v = array([  6.11242244e-02,   2.89653535e-01,   7.94314249e-01,
        -3.20708568e-02,   5.11681485e-02,   5.32913320e-01,
        -1.78331728e-01,   4.31527747e-01,  -1.08549881e-02,
         3.21256789e-01,  -7.03089123e-02,   7.22629763e-02,
         7.97448256e-02,  -8.52081772e-04,   7.66169966e-03,
        -1.13579708e-01,  -6.03034682e-01,  -6.98038219e-01,
        -1.89876807e-01,   1.56603098e-01,  -5.04314372e-01,
        -3.11011260e-02,  -7.67252299e-02,  -1.48860963e-01,
        -3.31170392e-02,   5.83401508e-01,   5.32945098e-01,
         3.44663122e-01,   9.20029194e-01,  -3.58423952e-01,
         2.63214686e-01,  -9.43235599e-02,  -9.33102549e-02,
         3.41146158e-01,  -1.94242634e-02])

    #Pa completa filtrada 3mm
    v = array([ 6.01287452e-01, 4.38723449e-01, 1.43084162e+00,
                -1.62499201e-01, 9.11754926e-04, 1.35783742e+00,
                4.18625568e-01, 5.48893964e-01, -2.88737812e-02,
                8.21810883e-01, 1.60021716e-01, 6.75498267e-02,
                2.02815593e-01, 2.10435937e-02, 1.76268132e-02,
                -4.42642101e-01, -1.11486732e+00, -1.44688518e-01,
                7.06505573e-02, -4.29640954e-01, 2.66671401e-01,
                -6.87355941e-02, -1.30855344e-01, 4.67678861e-02,
                -1.16512312e-02, -1.85217968e-01, 5.48742656e-02,
                -1.15640905e-01, -6.01464874e-01, 3.69218793e-02,
                -3.81872876e-02, 1.38044769e-03, 1.51381408e-01,
                -4.33149498e-02, 3.88079293e-02])
    # Coated position 4 - 50mm
    v = array([ 0.1091398 ,  0.16865895,  0.56580756, -0.29636652,  0.18666643,
        0.7527671 , -0.633448  ,  0.41507246, -0.04420224,  0.46162817,
       -0.24714194,  0.06876626,  0.11878242, -0.02476894,  0.01133233,
        0.08093234, -0.49655588, -0.12442556, -0.69096851,  0.63014616,
       -0.72475062, -0.04190256,  0.03730042, -0.12570142, -0.01415051,
        1.09974169,  0.06588542,  1.24086915,  1.31121211, -0.42190859,
        0.20316487,  0.57307514, -0.70723461,  0.60774379,  0.21036691])
    
##    f = f4coated4_50mm(x,y,z)
##    dx = f.diff(x)
##    dy = f.diff(y)
##    dz = f.diff(z)

    #f = fn4(x,y,z)
##    dP = dpolynomial(array([x,y,z]),rR)
##    dx = dP[0]
##    dy = dP[1]
##    dz = dP[2]
    
    ax = P[0]
    ay = P[1]
    az = P[2]


    #TODO nao serve nsolve pq a funcao nao e globalmente polinomial    
##    f1 = (x-ax)*dy-(y-ay)*dx
##    f2 = (y-ay)*dz-(z-az)*dy

    s = newton_krylov(fn4,P)
    print s
    #s=nsolve((f,f1,f2),(x,y,z),(ax,ay,az),tol=1e-3)
    #J = sqrt((ax-s[0])**2+(ay-s[1])**2+(az-s[2])**2)
    
    return s

def main():
    Rays1 = load('coated_points/pos4_black.npz')
    Rays1  = Rays1['array']
    Rays2 = load('coated_points/pos4_blue.npz')
    Rays2  = Rays2['array']
    rR = concatenate((Rays1,Rays2))

    Js=[]
    i=0
    for ray in rR:
        P=[ray[0],ray[1],ray[2]]
        Js.append(minPoint(P))
        i+=1
        if not i%100:
            print(str(i)+' mean - '+str(mean(Js)))
            print(str(i)+' max - '+str(max(Js)))
    return     
