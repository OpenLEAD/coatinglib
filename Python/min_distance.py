from sympy import *
from numpy import *

def vector4(x,y,z):
    return [1, z, z**2, z**3, z**4, y, y*z, y*z**2, y*z**3, y**2, y**2*z, y**2*z**2, y**3, y**3*z, y**4, x, x*z, x*z**2, x*z**3, x*y, x*y*z, x*y*z**2, x*y**2, x*y**2*z, x*y**3, x**2, x**2*z, x**2*z**2, x**2*y, x**2*y*z, x**2*y**2, x**3, x**3*z, x**3*y, x**4]

def fn4(x,y,z,v):
    a=vector4(x,y,z)
    value = 0
    for i in range(0,len(v)):value+=v[i]*a[i]
    return value

def f4(x,y,z):
    return 0.0158409735155322*x**4 - 0.0455175545677363*x**3*y + 0.229708256297771*x**3*z - 0.0123881037382856*x**3 - 0.0404958971530159*x**2*y**2 + 0.0370550760761227*x**2*y*z - 0.577768075781302*x**2*y - 0.155580530030559*x**2*z**2 + 0.0362405492287055*x**2*z - 0.131409797907689*x**2 + 0.0202057385466043*x*y**3 + 0.0426930375374075*x*y**2*z + 0.0696863140265359*x*y**2 - 0.0505449727608702*x*y*z**2 + 0.225686420684704*x*y*z - 0.0384970823430439*x*y + 0.105768716128252*x*z**3 - 0.118067494638723*x*z**2 - 1.21492908245443*x*z - 0.18276378366575*x + 0.0166396304986572*y**4 + 0.00338711654878079*y**3*z + 0.216501859969158*y**3 + 0.0811414830256883*y**2*z**2 + 0.02769438794406*y**2*z + 0.942772232605902*y**2 - 0.0290415751360407*y*z**3 + 0.627763785746382*y*z**2 + 0.0884479216928731*y*z + 1.61784537809966*y + 0.0109771138288731*z**4 - 0.178048926480733*z**3 + 1.50165747078441*z**2 + 0.196218414740315*z + 0.76794299165963

def f5(x,y,z):
    return 0.0297659116455479*x**5 + 0.181062045560249*x**4*y - 0.128661031864172*x**4*z + 0.307369024428665*x**4 + 0.0187730062188317*x**3*y**2 - 0.352382984812728*x**3*y*z - 0.0165274665944978*x**3*y + 0.109314604473024*x**3*z**2 - 0.285345405421894*x**3*z - 0.0953176916491287*x**3 + 0.0408304246877191*x**2*y**3 + 0.00447133758293315*x**2*y**2*z + 0.195842840630828*x**2*y**2 + 0.27146542716375*x**2*y*z**2 + 0.233595210793662*x**2*y*z - 0.260349111071952*x**2*y - 0.0589021386012211*x**2*z**3 + 0.187272006426444*x**2*z**2 + 0.662311023454343*x**2*z - 0.100094166057317*x**2 - 0.0432138132832048*x*y**4 + 0.0400826659272909*x*y**3*z - 0.42553574962281*x*y**3 - 0.102140941691896*x*y**2*z**2 + 0.409711840025748*x*y**2*z - 1.565282909628*x*y**2 - 0.0334481817041418*x*y*z**3 - 0.733013704495247*x*y*z**2 + 1.27796791340411*x*y*z - 2.51747409763771*x*y - 0.020191776904239*x*z**4 + 0.203163668332096*x*z**3 - 1.18680358227468*x*z**2 - 0.369578257596795*x*z - 1.47497490230636*x - 0.00520797176161978*y**5 + 0.040846567888235*y**4*z - 0.0651785345972887*y**4 - 0.00582434668496111*y**3*z**2 + 0.429749743471307*y**3*z - 0.294262656848997*y**3 + 0.0302244925660516*y**2*z**3 + 0.00973115339906459*y**2*z**2 + 1.6524767421243*y**2*z - 0.600269372065211*y**2 - 0.0149898305108897*y*z**4 + 0.183269458830206*y*z**3 + 0.374946543237288*y*z**2 + 2.72744600165394*y*z - 0.577089308079262*y + 0.00729646367142089*z**5 - 0.065684684064366*z**4 + 0.185426421490161*z**3 + 1.25471056201527*z**2 + 1.66800538058776*z - 0.370560555814104


def minPoint(P):
    x=Symbol('x')
    y=Symbol('y')
    z=Symbol('z')
    # Atras da Pa
    v= array([ 0.48142865,  0.36919764,  1.50562549,  0.00882344,  0.01972781,
        1.3841799 ,  0.28006017,  0.98778636, -0.02338231,  0.96834179,
        0.24100917,  0.15813788,  0.29048836,  0.04838359,  0.03168633,
       -0.39182614, -2.00343824, -0.99320701,  0.10410255, -0.59241825,
       -1.58884299,  0.03434364, -0.51603795, -0.28188791, -0.09554816,
        1.1591741 ,  1.08708153, -0.4800173 ,  1.32665283, -0.46163832,
        0.27164667, -0.3625252 ,  0.80764589,  0.40643701, -0.3522112 ])
    #Pa inteira
    v = array([ 0.76794299,  0.19621841,  1.50165747, -0.17804893,  0.01097711,
        1.61784538,  0.08844792,  0.62776379, -0.02904158,  0.94277223,
        0.02769439,  0.08114148,  0.21650186,  0.00338712,  0.01663963,
       -0.18276378, -1.21492908, -0.11806749,  0.10576872, -0.03849708,
        0.22568642, -0.05054497,  0.06968631,  0.04269304,  0.02020574,
       -0.1314098 ,  0.03624055, -0.15558053, -0.57776808,  0.03705508,
       -0.0404959 , -0.0123881 ,  0.22970826, -0.04551755,  0.01584097])
    #Pa inteira 5 grau
    v = array([-0.37056056,  1.66800538,  1.25471056,  0.18542642, -0.06568468,
        0.00729646, -0.57708931,  2.727446  ,  0.37494654,  0.18326946,
       -0.01498983, -0.60026937,  1.65247674,  0.00973115,  0.03022449,
       -0.29426266,  0.42974974, -0.00582435, -0.06517853,  0.04084657,
       -0.00520797, -1.4749749 , -0.36957826, -1.18680358,  0.20316367,
       -0.02019178, -2.5174741 ,  1.27796791, -0.7330137 , -0.03344818,
       -1.56528291,  0.40971184, -0.10214094, -0.42553575,  0.04008267,
       -0.04321381, -0.10009417,  0.66231102,  0.18727201, -0.05890214,
       -0.26034911,  0.23359521,  0.27146543,  0.19584284,  0.00447134,
        0.04083042, -0.09531769, -0.28534541,  0.1093146 , -0.01652747,
       -0.35238298,  0.01877301,  0.30736902, -0.12866103,  0.18106205,
        0.02976591])
    
    f = f5(x,y,z)
    dx = f.diff(x)
    dy = f.diff(y)
    dz = f.diff(z)
    
    ax = P[0]
    ay = P[1]
    az = P[2]

    f1 = (x-ax)*dy-(y-ay)*dx
    f2 = (y-ay)*dz-(z-az)*dy

    s=nsolve((f,f1,f2),(x,y,z),(ax,ay,az))
    J = sqrt((ax-s[0])**2+(ay-s[1])**2+(az-s[2])**2)
    
    return J

def main():
    Rays1 = load('blade_sampling/blade_crop_fast.npz')
    Rays1  = Rays1['array']
    Rays2 = load('blade_sampling/blade_crop_fast2.npz')
    Rays2  = Rays2['array']

    rR = concatenate((Rays1,Rays2))
    rR[:,0:3] = rR[:,0:3]

    Js=[]
    i=0
    for ray in rR:
        P=[ray[0],ray[1],ray[2]]
        Js.append(minPoint(P))
        i+=1
        if not i%100: print(str(i)+' - '+str(mean(Js)))
    return Js    
