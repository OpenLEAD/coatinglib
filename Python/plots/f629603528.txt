import coating
from openravepy import *
from numpy import *
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from math import *

# Get poinst for coating
nearlist = numpy.load('nearPointsByNumberOfPoints0_40.npz')
nearlist  = nearlist['array']

allangles = numpy.load('allangles0_40.npz')
allangles  = allangles['array']


#allangles = coating.computeAllAngularDistances(nearlist)
#numpy.savez_compressed('allangles0.npz', array=allangles)

allclusterlistangles,allclusterlistpoints = coating.clusteringAllNearestAngles(allangles,nearlist)

angles, pointprojections = coating.computeAngularDistances(nearlist[4000])
xarray=[]
yarray=[]
zarray=[]
for i in range(0,len(pointprojections)):
	xarray.append(pointprojections[i][0])
	yarray.append(pointprojections[i][1])
	zarray.append(pointprojections[i][2])
plt.ion()
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
Axes3D.scatter(ax,xarray, yarray, zarray)

Axes3D.scatter(ax,nearlist[4000][0][0], nearlist[4000][0][1], nearlist[4000][0][2],s=60,c=u'r')
Axes3D.scatter(ax,pointprojections[0][0], pointprojections[0][1], pointprojections[0][2],s=40,c=u'g')

referencepoint = numpy.array([nearlist[4000][0][0], nearlist[4000][0][1], nearlist[4000][0][2]])  
angles=[]
v = pointprojections[0]-referencepoint
vnorm = sqrt(dot(v,v))
for pointprojection in pointprojections:
    Axes3D.scatter(ax,pointprojection[0], pointprojection[1], pointprojection[2],s=40,c=u'g')
    v2 = pointprojection-referencepoint
    thecross = cross(v,v2)
    thecrossnorm = sqrt(dot(thecross,thecross))
    v2norm = sqrt(dot(v2,v2))
    thecos = 1.0*dot(v,v2)/(vnorm*v2norm)
    thesin = 1.0*thecrossnorm/(vnorm*v2norm)
    print(math.atan2(thesin,thecos))
    angles.append(math.atan2(thesin,thecos))
    plt.show()
    #input("Press Enter to continue...")
    Axes3D.scatter(ax,pointprojection[0], pointprojection[1], pointprojection[2],s=20,c=u'b')

